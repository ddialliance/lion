<?php

/**
 * Implementation of hook_menu().
 */
function xmi_export_menu() {
    $items['sphinx'] = array(
        'title' => 'Testpage for Sphinx doc',
        'page callback' => 'sphinx_page',
        'access arguments' => array('administer modules'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'sphinx.inc',
    );
    
    $items['xmi-export'] = array(
        'title' => 'Testpage for Export XMI',
        'page callback' => 'xmi_export_page',
        'access arguments' => array('administer modules'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'xmi_export.inc',
    );

    /* XMI */
    $items['xmi.xml'] = array(
        'title' => 'xmi.xml',
        'page callback' => 'xmi_export_xmi',
        'access arguments' => array('access content'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'xmi_export.inc',
    );

    $items['package/%/xmi.xml'] = array(
        'title' => 'xmi.xml',
        'page callback' => 'xmi_export_xmi',
        'access arguments' => array('access content'),
        'page arguments' => array(1),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'xmi_export.inc',
    );

    /* Docbook */
    $items['docbook.xml'] = array(
        'title' => 'docbook.xml',
        'page callback' => 'docbook_export',
        'access arguments' => array('access content'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'docbook_export.inc',
    );

    $items['package/%/docbook.xml'] = array(
        'title' => 'docbook.xml',
        'page callback' => 'docbook_export',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'docbook_export.inc',
    );

    $items['docbook.html'] = array(
        'title' => 'docbook.html',
        'page callback' => 'docbook_html',
        'access arguments' => array('access content'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'docbook_export.inc',
    );

    /* Graph */
    $items['graph'] = array(
        'title' => 'generate graph',
        'page callback' => 'graph_index',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'dot.inc',
    );
        
    $items['graph/%/%/%'] = array(
        'title' => 'generate graph',
        'page callback' => 'graph_page',
        'access arguments' => array('access content'),
        'page arguments' => array(1, 2, 3),
        'type' => MENU_CALLBACK,
        'file' => 'dot.inc',
    );
 
    $items['graph/%/%'] = array(
        'title' => 'generate graph',
        'page callback' => 'graph_page',
        'access arguments' => array('access content'),
        'page arguments' => array(1, 2),
        'type' => MENU_CALLBACK,
        'file' => 'dot.inc',
    );          
    
    /* Old graph */
    $items['package/%/dot.txt'] = array(
        'title' => 'DOT dump per package',
        'page callback' => 'dot_package_export',
        'access arguments' => array('access content'),
        'page arguments' => array(1),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'graph.inc',
    );

    $items['package/%/%'] = array(
        'title' => 'DOT dump per package',
        'page callback' => 'dot_package_export_image',
        'access arguments' => array('access content'),
        'page arguments' => array(1, 2),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'graph.inc',
    );

    $items['objects.dot'] = array(
        'title' => 'Objects as dot',
        'page callback' => 'graph_dot',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'graph.inc',
    );

    $items['graph/dot/package-list'] = array(
        'title' => 'List of urls',
        'page callback' => 'dot_url_list',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'graph.inc',
    );

    $items['issues'] = array(
        'title' => 'Validation of objects',
        'page callback' => 'issues_page',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'validate.inc',
    );

    $items['mapping/%'] = array(
        'title' => 'Mappings',
        'page callback' => 'get_mappings',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'mapping.inc',
    );
    
    $items['parentobjectproperties/%'] = array(
        'title' => 'Parent properties',
        'page callback' => 'get_parent_properties',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'xmi_export.inc',
    );

    $items['parentobjectrelationships/%'] = array(
        'title' => 'Parent relationships',
        'page callback' => 'get_parent_relationships',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'xmi_export.inc',
    );

    return $items;
}

/**
 * implement hook_theme
 * @return list for avalible themes
 */
function xmi_export_theme() {
    $path = drupal_get_path('module', 'xmi_export') . '/templates';
    return array(
        'xmi' => array(
            'path' => $path,
            'template' => 'xmi',
            'variables' => array('objects' => NULL),
        ), 'issues' => array(
            'path' => $path,
            'template' => 'issues',
            'variables' => array('objects' => NULL),
        ), 'mappings' => array(
            'path' => $path,
            'template' => 'mappings',
            'variables' => array('mappings' => NULL),
        ), 'xmi_cardinality' => array(
            'path' => $path,
            'template' => 'xmi_cardinality',
            'variables' => array('object' => NULL, 'cardinality' => NULL, 'property' => NULL),
        ), 'docbook' => array(
            'path' => $path,
            'template' => 'docbook',
            'variables' => array('objects' => NULL, 'build' => NULL),
        ), 'dot' => array(
            'path' => $path,
            'template' => 'dot',
            'variables' => array('dot' => NULL)            
        ), 'dot.graph' => array(
            'path' => $path,
            'template' => 'dot.graph',
            'variables' => array('data' => NULL)
        ), 'parent_properties' => array(
            'path' => $path,
            'template' => 'parent_properties',
            'variables' => array('title' => NULL, 'properties' => NULL)
        ), 'parent_relationships' => array(
            'path' => $path,
            'template' => 'parent_relationships',
            'variables' => array('title' => NULL, 'relationships' => NULL)
        ), 'sphinx.object' => array(
            'path' => $path,
            'template' => 'sphinx.object',
            'variables' => array('object' => NULL)
    ));
}

/**
 * Hook for cleaning upp diffs for field groups
 * 
 * @param type $entity_diffs
 * @param type $context
 */
function xmi_export_entity_diff_alter(&$entity_diffs, &$context) {
    $entity_diffs['field_property']['#old'] = _diff_cleanup($entity_diffs['field_property']['#old']);
    $entity_diffs['field_property']['#new'] = _diff_cleanup($entity_diffs['field_property']['#new']);

    $entity_diffs['field_relationship']['#old'] = _diff_cleanup($entity_diffs['field_relationship']['#old']);
    $entity_diffs['field_relationship']['#new'] = _diff_cleanup($entity_diffs['field_relationship']['#new']);

    $entity_diffs['field_rdf_mapping']['#old'] = _diff_cleanup($entity_diffs['field_rdf_mapping']['#old']);
    $entity_diffs['field_rdf_mapping']['#new'] = _diff_cleanup($entity_diffs['field_rdf_mapping']['#new']);
}

/**
 * Cleanup the drupal dif output
 * @param type $field field to clean
 * @return string cleaned drif
 */
function _diff_cleanup($field) {
    if (is_array($field)) {
        $subject = implode(PHP_EOL, $field);
    } else {
        $subject = $field;
    }
    $pattern = '%(<div class="field-item\s.+?">.+?)(</div>)%';
    $replacement = '$1 $2';
    $subject = trim(preg_replace('/\s+/', ' ', $subject));
    $subject = str_replace("</tr>", "</tr>\n", $subject);
    $subject = str_replace("</th>", " | </th>", $subject);
    $subject = str_replace("</td>", " | </td>", $subject);

    $subject = trim(preg_replace($pattern, $replacement, $subject));

    $subject = strip_tags($subject);
    $subject = str_replace(" Edit Delete", "", $subject);
    $subject = str_replace(" | Operations |", "", $subject);
    $subject = str_replace("| |", "", $subject);

    return $subject;
}

function xmi_export_node_view($node, $view_mode, $langcode) {
    if($view_mode == "full" && $node->type == "ddiobject")
    {
        $js_p = 'jQuery(document).ready(function(){jQuery("<div id=\'parent_properties\'></div>")'
                . '.insertAfter(".field-name-field-property .field-label"); '
                . 'jQuery("#parent_properties").load("/parentobjectproperties/' . $node->nid . '")});';
        drupal_add_js($js_p, "inline");
        
        $js_r = 'jQuery(document).ready(function(){jQuery("<div id=\'parent_relationships\'></div>")'
                . '.insertAfter(".field-name-field-relationship .field-label"); '
                . 'jQuery("#parent_relationships").load("/parentobjectrelationships/' . $node->nid . '")});';
        drupal_add_js($js_r, "inline");
    }
}